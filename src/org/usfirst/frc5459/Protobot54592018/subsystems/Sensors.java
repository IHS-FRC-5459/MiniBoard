// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5459.Protobot54592018.subsystems;

import org.usfirst.frc5459.Protobot54592018.Robot;
import org.usfirst.frc5459.Protobot54592018.RobotMap;
import org.usfirst.frc5459.Protobot54592018.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.BuiltInAccelerometer;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

import com.analog.adis16448.frc.*;
import com.analog.adis16448.frc.ADIS16448_IMU;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Sensors extends Subsystem {

	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Encoder rightQEncoder = RobotMap.sensorsRightQEncoder;
    private final Encoder leftQEncoder = RobotMap.sensorsLeftQEncoder;
    
    //double XPosition;
    //double YPosition;
    
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final ADIS16448_IMU imu = RobotMap.imu;
    
    @Override
    public void initDefaultCommand() {
    	
    	System.out.println("InitDefaultCommand");
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	setDefaultCommand(new GetRobotPosition());
    	
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
    	/*SmartDashboard.putNumber("Right Encoder Position", getRightEncoderPosition());
    	SmartDashboard.putNumber("Right Encoder Velocity", getRightEncoderVelocity());
    	SmartDashboard.putNumber("Left Encoder Position", getLeftEncoderPosition());
    	SmartDashboard.putNumber("Left Encoder Velocity", getLeftEncoderVelocity());
    	
    	SmartDashboard.putNumber("Yaw", getYaw());
    	SmartDashboard.putNumber("Y Acceleration", getAccelY());
    	SmartDashboard.putNumber("X Acceleration", getAccelX());
    	*/
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
/*    	SmartDashboard.putNumber("Right Encoder Position", getRightEncoderPosition());
    	SmartDashboard.putNumber("Right Encoder Velocity", getRightEncoderVelocity());
    	SmartDashboard.putNumber("Left Encoder Position", getLeftEncoderPosition());
    	SmartDashboard.putNumber("Left Encoder Velocity", getLeftEncoderVelocity());
    	
    	SmartDashboard.putNumber("Yaw", getYaw());

    	SmartDashboard.putNumber("Y Acceleration", getAccelY());
    	SmartDashboard.putNumber("X Acceleration", getAccelX());
    	SmartDashboard.putNumber("Robot Position", Robot.GlobalXPosition);
*/
    }
    
    //ENCODERS
    /*
    public double getRightEncoderPosition() {
    	return RobotMap.driveRightFront.getSensorCollection().getQuadraturePosition();
    }
    public double getRightEncoderVelocity() {
    	return RobotMap.driveRightFront.getSensorCollection().getAnalogInVel();
    }
    //Set this to 0 when the robot initializes
    public double getLeftEncoderPosition() {
    	return  RobotMap.driveLeftFront.getSensorCollection().getQuadraturePosition();
    }
    
    public double getLeftEncoderVelocity() {
    	return RobotMap.driveLeftFront.getSensorCollection().getAnalogInVel();
    }
    */
    //IMU
    /*
    public double getYaw() {
    	return imu.getYaw();
    }
    public static void SetYaw(double Yaw){
    	Robot.GlobalYaw = Yaw;
    }
    */ 
    static double posX = 0, posY = 0, velX = 0, velY = 0; 
   
    public static double GetPositionX()
    {
    	return posX ;
    }
    public static double GetPositionY()
    {
    	return posY ;
    }
    
    public static double GetVelocityX()
    {
    	return velX ; 
    }
    public static double GetVelocityY()
    {
    	return velY ;
    }
    
    public static void SetPositionX(double XPosition){
    	posX = XPosition ;
    }
    public static void SetPositionY(double YPosition){
    	posY = YPosition ;
    }
    public static void SetVelocityX(double XVelocity){
    	velX = XVelocity ;
    }
    public static void SetVelocityY(double YVelocity){
    	velY = YVelocity ; 
    }
    
/*    
    public double getAccelY(){
    	return imu.getAccelY();
    }
    public double getAccelX(){
      	return imu.getAccelX();
    }
 */   
    //Position = Distance traveled
    /*public void setXPosition(){
    	XPosition = GetPositionX.getPosition();
    }
    
    public double getXPosition(){
    	return XPosition;
    }
    */
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

